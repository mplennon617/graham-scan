import GrahamScan as gs
import numpy as np
import matplotlib.pyplot as plt
import random
import math

# Helper method to split a set of points containing points (x,y) into
# a set with all x coords and a parallel set with all y coords.
def split_points(point_set):
    x_coords = []
    y_coords = []

    for point in point_set:
        x_coords.append(point[0])
        y_coords.append(point[1])

    return [x_coords, y_coords]

# Helper method. Given an integer n, return a list of points containing random points (x,y), where
# x = random integer (0-n), y = random integer (0-n).
def create_random_points(n):

    point_list = []

    for i in range(n):
        point_list.append((int(random.uniform(0,n)),int(random.uniform(0,n))))

    return point_list

# Helper method. Given an integer n, return a list of points containing points (x,y), s.t.
# two concentric circles with center at n/2 and radius n/2 and n/4 respectively are created.
def create_concentric_circle_points(n):

    point_list = []

    midpoint = n/2.0

    angle = 0
    angle_step = (2*math.pi) / n

    for i in range(n):
        
        if i % 2 == 0:
            point_list.append((midpoint*math.cos(angle) + midpoint,midpoint*math.sin(angle) + midpoint))
        else:
            point_list.append(((midpoint/2)*math.cos(angle) + midpoint,(midpoint/2)*math.sin(angle) + midpoint))

        angle += angle_step

    return point_list

# --------------------------------------- MAIN CODE ---------------------------------------
# For all sizes dictated by SIZES, create a gift and its graham scan, then display as a pyplot figure.
SIZES = [10, 100, 1000, 10000]
DISTRIBUTIONS = ["RANDOM","CIRCULAR"]

for i in range(len(SIZES)):
    for dist in DISTRIBUTIONS:

        gift = []

        if (dist == "RANDOM"):
            gift  = create_random_points(SIZES[i])  # Gift -- list of points (x,y) generated by create_random_points above.
        elif (dist == "CIRCULAR"):
            gift  = create_concentric_circle_points(SIZES[i])  # Gift -- list of points (x,y) generated by create_random_points above.

        split_gift = split_points(gift)         # Use split_gift to prepare the gift for plotting.

        wrapping = gs.graham_scan(gift)         # Apply graham scan to the gift to determine a Convex Hull "wrapping".
        wrapping.append(wrapping[0])            # Connect the end of the wrapping back to the beginning.
        wrapping = split_points(wrapping)       # Use split_points to prepare the wrapping for plotting.

        # Pyplot functions for plotting.
        plt.figure(i)
        plt.scatter(split_gift[0], split_gift[1])
        plt.plot(wrapping[0], wrapping[1], lineStyle='solid', color='red')
        plt.show()
        #plt.savefig() printed a blank page...what is this, CImg 2.0?